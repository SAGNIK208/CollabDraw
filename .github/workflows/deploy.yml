name: Build and Deploy TurboRepo to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node & PNPM
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create .env file for Prisma
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > ./packages/db/.env  

      - name: Generate Prisma Client
        run: pnpm --filter=./packages/db exec prisma generate

      - name: Build Everything
        run: pnpm run build

      - name: Prune Unused Packages (keep prod only)
        run: pnpm prune --prod

        - name: Prepare Deployment Folder
        run: |
          mkdir -p deploy

          # Copy apps with correct structure
          mkdir -p deploy/apps/http-backend.app
          cp -r ./apps/http-backend/dist/* deploy/apps/http-backend.app/
          
          mkdir -p deploy/apps/ws-backend.app
          cp -r ./apps/ws-backend/dist/* deploy/apps/ws-backend.app/

          # Frontend remains without .app
          cp -r ./apps/frontend/.next/standalone deploy/apps/frontend
          cp -r ./apps/frontend/.next/static deploy/apps/frontend/.next/static
          cp -r ./apps/frontend/public deploy/apps/frontend/public || true

          # Copy packages
          mkdir -p deploy/packages/db.app
          cp -r ./packages/db/dist/* deploy/packages/db.app/
          
          mkdir -p deploy/packages/common.app
          cp -r ./packages/common/dist/* deploy/packages/common.app/

          # Copy prod node_modules
          cp -r node_modules deploy/

          # Copy required root files
          cp package.json pnpm-lock.yaml deploy/

          tar -czf build.tar.gz deploy
          
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add Known Hosts
        run: ssh-keyscan ${{ secrets.DEPLOY_IP }} >> ~/.ssh/known_hosts

      - name: Upload Build to EC2
        run: |
          scp build.tar.gz ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_IP }}:${{ secrets.DEPLOY_PATH }}

      - name: SSH and Deploy on EC2
        run: |
          ssh ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_IP }} << 'EOF'
            set -e
            export PATH=\$PATH:/home/ubuntu/.nvm/versions/node/v22.14.0/bin
            cd ${{ secrets.DEPLOY_PATH }}

            # Clean old and unpack
            rm -rf deploy
            tar -xzf build.tar.gz
            cd deploy

            # Write .env files
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > apps/http-backend/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> apps/http-backend/.env
            echo "WS_URL=${{ secrets.WS_URL }}" >> apps/http-backend/.env
            echo "WS_URL=${{ secrets.WS_URL }}" >> apps/frontend/.env

            # Install production dependencies
            pnpm install --prod

            # Restart services using PM2
            pm2 delete api || true
            cd apps/http-backend
            pm2 start index.js --name api
            cd ../..

            pm2 delete ws || true
            cd apps/ws-backend
            pm2 start index.js --name ws
            cd ../..

            pm2 delete web || true
            cd apps/frontend
            pm2 start server.js --name web
            cd ../..

            pm2 save
            pm2 startup
          EOF